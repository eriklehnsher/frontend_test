{"remainingRequest":"F:\\HANOICAR_frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!F:\\HANOICAR_frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!F:\\HANOICAR_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\HANOICAR_frontend\\src\\views\\car\\CarInfo.vue?vue&type=template&id=48ce18c6&scoped=true&","dependencies":[{"path":"F:\\HANOICAR_frontend\\src\\views\\car\\CarInfo.vue","mtime":1672052069873},{"path":"F:\\HANOICAR_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1672052217027},{"path":"F:\\HANOICAR_frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1672052210513},{"path":"F:\\HANOICAR_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1672052217027},{"path":"F:\\HANOICAR_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1672052203919}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}